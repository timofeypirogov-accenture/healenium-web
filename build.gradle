plugins {
    id 'java'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"

    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id "com.github.hierynomus.license" version "0.15.0"
    id "maven"
}

group 'com.epam.healenium'
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    maven {
        url "https://dl.bintray.com/epam/healenium"
    }
    mavenCentral()
}

dependencies {
    compile group: 'com.typesafe', name: 'config', version: '1.3.4'
    compile group: 'com.epam.healenium', name: 'tree-comparing', version: '0.4.8'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.12'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    compile group: 'org.jetbrains', name: 'annotations', version: '18.0.0'
    compile group: 'org.mapstruct', name: 'mapstruct', version: '1.3.1.Final'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.8'

    implementation 'one.util:streamex:0.7.2'

    testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.19.v20190610'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '2.1'
    testCompile group: 'com.codeborne', name: 'selenide', version: '5.5.1'
    testCompile group: 'org.testcontainers', name: 'junit-jupiter', version: '1.13.0'

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.1")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.1")

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.8'
}

ext {
    bintrayUserName = (project.hasProperty('BINTRAY_USERNAME') ? project.findProperty('BINTRAY_USERNAME') : System.getenv()['BINTRAY_USERNAME'])
    bintrayPassword = (project.hasProperty('BINTRAY_PASSWORD') ? project.findProperty('BINTRAY_PASSWORD') : System.getenv()['BINTRAY_PASSWORD'])
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

task javadocJar(type: Jar) {
    from javadoc.destinationDir
    archiveClassifier = "javadoc"
}

publishing {
    publications {
        HealeniumPublication(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom {
                name = "healenium-web"
                description = 'healenium web client'
            }
        }
    }
}


bintray {
    user = bintrayUserName
    key = bintrayPassword
    publications = ['HealeniumPublication']
    dryRun = false
    publish = true
    pkg {
        userOrg = 'epam'
        repo = 'healenium'
        name = 'healenium-web'
        desc = project.description
        websiteUrl = 'https://github.com/healenium'
        vcsUrl = 'https://github.com/healenium/healenium-web'
        labels = ['gradle', 'healenium']
        publicDownloadNumbers = true
        attributes = [:]
        version {
            name = project.version
            vcsTag = project.version
            attributes = [:]
        }
    }
}

bintrayUpload.onlyIf {
    !project.version.toString().toUpperCase().endsWith("-SNAPSHOT") && !project.version.toString().toUpperCase().contains("-DEV")
}

test {
    useJUnitPlatform()
    ignoreFailures = true
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

license {
    header rootProject.file('HEADER')
    excludes(["**/*.html", "*.conf", "*.properties"])
    strictCheck false
}